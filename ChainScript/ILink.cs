using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Stratumn.Chainscript
{
    using System;

    public interface ILink
    {

        /// <summary>
        /// A link is usually created as a result of an action. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the link's action. </exception>

        string Action();

        /// <summary>
        /// Add a signature to the link.
        /// This will validate the signature before adding it. </summary>
        /// <param name="signature"> link signature. </param>
        /// <exception cref="ChainscriptException">  </exception>
        void AddSignature(Signature signature);

        /// <summary>
        /// The client id allows segment receivers to figure out how the segment was
        /// encoded and can be decoded. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the link's client id. </exception>
        string ClientId();

        /// <summary>
        ///*
        /// Returns custom class </summary>
        /// <param name="clazz">
        /// @return </param>
        /// <exception cref="ChainscriptException"> </exception>
        Object Data();

        /// <summary>
        /// Serialize the link and compute a hash of the resulting bytes.
        /// The serialization and hashing algorithm used depend on the link version. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the hash bytes. </exception>
        byte[] Hash();

        /// <summary>
        /// A link always belongs to a specific process map. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the link's map id. </exception>
        string MapId();

        /// <summary>
        ///*
        /// Returns an instance of the custom object of data type clazz
        /// @return </summary>
        /// <exception cref="ChainscriptException"> </exception>
      //  MetaDataType Metadata<MetaDataType>(Type clazzOfT);

        /// <summary>
        /// Maximum number of children a link is allowed to have.
        /// This is set to -1 if the link is allowed to have as many children as it
        /// wants. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the maximum number of children allowed. </exception>

        int OutDegree();

        /// <summary>
        /// A link can have a parent, referenced by its link hash. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the parent link hash. </exception>
        byte[] PrevLinkHash();

        /// <summary>
        /// The priority can be used to order links. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the link's priority. </exception>


        double Priority();

        /// <summary>
        /// A link always belong to an instance of a process. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the link's process name. </exception>


        Process Process();

        /// <summary>
        /// A link can contain references to other links. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns referenced links. </exception>


        LinkReference[] Refs();

        /// <summary>
        /// Create a segment from the link. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the segment wrapping the link. </exception>
        Segment Segmentify();

        /// <summary>
        /// Serialize the link.
        /// @returns link bytes.
        /// </summary
        byte[] Serialize();

        /// <summary>
        /// Return MetaData
        /// </summary>
        /// <returns></returns>
        object Metadata();
        /// <summary>
        /// Sign configurable parts of the link with the current signature version.
        /// The payloadPath is used to select what parts of the link need to be signed
        /// with the given private key. If no payloadPath is provided, the whole link
        /// is signed.
        /// The signature is added to the link's signature list. </summary>
        /// <param name="key"> private key in PEM format (generated by @stratumn/js-crypto). </param>
        /// <param name="payloadPath"> link parts that should be signed. </param>
        /// <exception cref="ChainscriptException">  </exception>


        void Sign(byte[] key, string payloadPath);

        /// <summary>
        /// @returns the link's signatures (if any).
        /// </summary>
        Signature[] Signatures();

        /// <summary>
        /// Compute the bytes that should be signed. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @argument version impacts how those bytes are computed.
        /// @argument payloadPath parts of the link that should be signed.
        /// @returns bytes to be signed. </exception>


        byte[] SignedBytes(string version, string payloadPath);

        /// <summary>
        /// (Optional) A link can be interpreted as a step in a process. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns the corresponding process step. </exception>


        string Step();

        /// <summary>
        /// (Optional) A link can be tagged.
        /// Tags are useful to filter link search results. </summary>
        /// <exception cref="ChainscriptException"> 
        /// @returns link tags. </exception>


        string[] Tags();

        /// <summary>
        /// Validate checks for errors in a link. </summary>
        /// <exception cref="ChainscriptException">  </exception>


        void Validate();

        /// <summary>
        /// The link version is used to properly serialize and deserialize it.
        /// @returns the link version.
        /// </summary>
        string Version();

        /// <returns> the link </returns>
        Stratumn.Chainscript.Proto.Link GetLink();
      
        /// <summary>
        ///*
        ///  Convert to a json object.
        /// @return
        /// </summary>


        string ToObject();

    }

}

